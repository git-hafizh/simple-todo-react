{"version":3,"sources":["TodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","edit","React","useState","msg","value","setValue","handleSubmit","e","preventDefault","id","uuidv4","onSubmit","className","placeholder","name","onChange","target","onClick","type","Todo","todos","deleteTodo","updateTodo","completeTodo","setEdit","map","todo","index","isComplete","key","TodoList","setTodos","task","test","alert","newTodos","console","log","newTodo","filter","prev","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gVAIe,SAASA,EAAT,GAAoC,IAAjBC,EAAgB,EAAhBA,QAASC,EAAO,EAAPA,KAAO,EACtBC,IAAMC,SAASF,EAAOA,EAAKG,IAAM,IADX,mBACzCC,EADyC,KAClCC,EADkC,KAGhD,SAASC,EAAaC,GACpBA,EAAEC,iBAEFT,EAAQ,CACNU,GAAIC,cACJP,IAAKC,IAGPC,EAAS,IAIX,OACE,6BAEE,0BAAMM,SAAUL,GACbN,EACD,yBAAKY,UAAU,yBACf,2BACEC,YAAY,cACZD,UAAU,kBACVE,KAAK,OACLV,MAAOA,EACPW,SAAU,SAAAR,GAAC,OAAIF,EAASE,EAAES,OAAOZ,UAEnC,4BAAQK,GAAG,aAAaQ,QAASX,EAAcY,KAAK,UAApD,WAKE,6BACA,2BACEL,YAAY,cACZD,UAAU,aACVE,KAAK,OACLV,MAAOA,EACPW,SAAU,SAAAR,GAAC,OAAIF,EAASE,EAAES,OAAOZ,UAEnC,4BAAQK,GAAG,UAAUQ,QAASX,EAAcY,KAAK,UAAjD,Q,wBCRKC,EA/BF,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,WAAYC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAAmB,EACxCtB,IAAMC,SAAS,CACrCO,GAAI,KACJN,IAAK,KAHyD,mBACzDH,EADyD,KACnDwB,EADmD,KAchE,OAAGxB,EAAKS,GACC,kBAAC,EAAD,CAAUT,KAAMA,EAAMD,QATV,SAACI,GACpBmB,EAAWtB,EAAKS,GAAIN,GACpBqB,EAAQ,CACNf,GAAI,KACJN,IAAK,QAQFiB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACf,yBAAKf,UAAWc,EAAKE,WAAa,iCAAmC,wBAAyBC,IAAKF,GACjG,yBAAKf,UAAU,YAAYK,QAAS,kBAAMM,EAAaG,EAAKjB,KAAKoB,IAAKH,EAAKjB,IACxEiB,EAAKvB,KAER,yBAAKS,UAAU,OACb,kBAAC,IAAD,CAAaH,GAAG,UAAUQ,QAAS,kBAAMI,EAAWK,EAAKjB,OACzD,kBAAC,IAAD,CAAQA,GAAG,WAAWQ,QAAS,kBAAMO,EAAQ,CAAEf,GAAIiB,EAAKjB,GAAIN,IAAKuB,EAAKvB,eCqB/D2B,MA/Cf,WAAqB,IAAD,EACQ7B,IAAMC,SAAS,IADvB,mBACXkB,EADW,KACJW,EADI,KAsClB,OACE,yBAAKnB,UAAU,MACb,iDACA,kBAAC,EAAD,CAAUb,QAtCE,SAACiC,GACf,IAAKA,EAAK7B,KAAO,QAAQ8B,KAAKD,EAAK7B,KACjC,OAAO+B,MAAM,wBAGf,IAAMC,EAAQ,sBAAOf,GAAP,CAAcY,IAC5BD,EAASI,GAETC,QAAQC,IAAIjB,MA+BV,kBAAC,EAAD,CAAMA,MAAOA,EAAOG,aAdL,SAACd,GACpB,IAAM6B,EAAUlB,EAAMK,KAAI,SAAAC,GAIxB,OAHGA,EAAKjB,KAAOA,IACbiB,EAAKE,YAAcF,EAAKE,YAEnBF,KAETK,EAASO,IAO2CjB,WA5BjC,SAACZ,GAClB,IAAM6B,EAAU,YAAIlB,GAAOmB,QAAO,SAAAb,GAAI,OAAIA,EAAKjB,KAAOA,KACtDsB,EAASO,IA0BiEhB,WAvB3D,SAACb,EAAI6B,GACtB,IAAKA,EAAQnC,KAAO,QAAQ8B,KAAKK,EAAQnC,KACvC,OAAO+B,MAAM,wBAIfH,GAAS,SAAAS,GAAI,OAAIA,EAAKf,KAAI,SAAAgB,GAAI,OAAKA,EAAKhC,KAAOA,EAAK6B,EAAUG,aClBjDC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.32c5ecc8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TodoForm.css\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function TodoForm({addTodo, edit}) {\r\n  const [value, setValue] = React.useState(edit ? edit.msg : \"\");\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    addTodo({\r\n      id: uuidv4(),\r\n      msg: value,\r\n    })\r\n\r\n    setValue(\"\")\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* <h4>Simple To-Do List</h4> */}\r\n      <form onSubmit={handleSubmit}>\r\n        {edit ? (\r\n        <div className=\"edit-todo from-bottom\">\r\n        <input\r\n          placeholder=\"Add todo...\"\r\n          className=\"input-todo-edit\"\r\n          name=\"task\"\r\n          value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n        />\r\n        <button id=\"update-btn\" onClick={handleSubmit} type=\"submit\">\r\n          Update\r\n        </button>\r\n        </div>\r\n        ) : (\r\n          <div>\r\n          <input\r\n            placeholder=\"Add todo...\"\r\n            className=\"input-todo\"\r\n            name=\"task\"\r\n            value={value}\r\n            onChange={e => setValue(e.target.value)}\r\n          />\r\n          <button id=\"add-btn\" onClick={handleSubmit} type=\"submit\">\r\n            +\r\n          </button>\r\n          </div>\r\n        )\r\n      }\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Todo.css\";\r\nimport { BsTrashFill } from \"react-icons/bs\";\r\nimport { FaEdit } from \"react-icons/fa\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nconst Todo = ({ todos, deleteTodo, updateTodo, completeTodo }) => {\r\n  const [edit, setEdit] = React.useState({\r\n    id: null,\r\n    msg: \"\",\r\n  });\r\n  \r\n  const submitUpdate = (msg) => {\r\n    updateTodo(edit.id, msg)\r\n    setEdit({\r\n      id: null,\r\n      msg: \"\"\r\n    })\r\n  }\r\n\r\n  if(edit.id){\r\n    return <TodoForm edit={edit} addTodo={submitUpdate}/>\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div className={todo.isComplete ? \"todo-task from-bottom complete\" : \"todo-task from-bottom\"} key={index}>\r\n      <div className=\"todo-item\" onClick={() => completeTodo(todo.id)} key={todo.id}>\r\n        {todo.msg}\r\n      </div>\r\n      <div className=\"btn\">\r\n        <BsTrashFill id=\"del-btn\" onClick={() => deleteTodo(todo.id)} />\r\n        <FaEdit id=\"edit-btn\" onClick={() => setEdit({ id: todo.id, msg: todo.msg})} />\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport \"./TodoList.css\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = React.useState([]);\r\n\r\n  const addTodo = (task) => {\r\n    if (!task.msg || /^\\s*$/.test(task.msg)) {\r\n      return alert(\"Todo cannot be empty\");\r\n    }\r\n\r\n    const newTodos = [...todos, task];\r\n    setTodos(newTodos);\r\n\r\n    console.log(todos);\r\n  };\r\n\r\n  const deleteTodo = (id) => {\r\n    const newTodo = [...todos].filter(todo => todo.id !== id)\r\n    setTodos(newTodo)\r\n}\r\n\r\nconst updateTodo = (id, newTodo) => {\r\n  if (!newTodo.msg || /^\\s*$/.test(newTodo.msg)) {\r\n    return alert(\"Todo cannot be empty\");\r\n  }\r\n\r\n  //\r\n  setTodos(prev => prev.map(item => (item.id === id ? newTodo : item)))\r\n}\r\n\r\nconst completeTodo = (id) => {\r\n  const newTodo = todos.map(todo => {\r\n    if(todo.id === id){\r\n      todo.isComplete = !todo.isComplete\r\n    }\r\n    return todo;\r\n  })\r\n  setTodos(newTodo)\r\n}\r\n\r\n  return (\r\n    <div className=\"bg\">\r\n      <h4>Simple To-Do List</h4>\r\n      <TodoForm addTodo={addTodo} />\r\n      <Todo todos={todos} completeTodo={completeTodo} deleteTodo={deleteTodo} updateTodo={updateTodo} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./TodoList\";\n\nfunction App(){\n  return(\n    <div>\n      <TodoList/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}